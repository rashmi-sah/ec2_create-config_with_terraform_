############### This workflow file in running terraform files to create vpc,ec2 and then login to ec2 server 
########### to perform docker installation
name: 'Terraform_config_worflow'

on:
  workflow_dispatch:
permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
      
     #### Checking terraform version
       
    - name: check terraform version
      run: terraform -v
      
     #### Initializing terraform
       
    - name: Terraform Init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: terraform init
      
    - name: Terraform Plan done
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: terraform plan -input=false
      
     #### This Terraform apply will create vpc,ec2 instance 
     
    - name: Terraform apply
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: terraform apply -auto-approve -input=false
      
      ##### Below run will setup private keys of ec2 instance in github runner
      
    - name: setup keys in ec2 instance
      run: |
          mkdir -p ~/.ssh/
          #### assigning terraform output value to a unix variable
          SSH_HOST="$(terraform output -raw ec2instance)"
          echo "SSH_HOST : " $SSH_HOST
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
      env:
          SSH_USER: ${{ secrets.USER_NAME }}
          SSH_KEY: ${{ secrets.PRIVATE_KEY }}
          
    #### Running sleep command so that ec2 initilization gets completed  
    
    - name: Sleep for  5 mins
      run: sleep 300s
      shell: bash
      
    #### Installing docker using unix commands
    
    - name: login ec2 server and install docker
      run: |
          ssh staging  '              
            echo "\n\n\n\n #########Installing Docker########### \n\n\n\n"
            sudo apt-get update
            sudo apt-get install \
            ca-certificates \
            curl \
            gnupg \
            lsb-release
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            echo \
               "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
                $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            apt-cache madison docker-ce
            sudo apt-get install -y docker-ce=5:20.10.17~3-0~ubuntu-jammy docker-ce-cli=5:20.10.17~3-0~ubuntu-jammy containerd.io docker-compose-plugin
            sudo docker run hello-world
          '
    #- name: Terraform destroy
     # env:
        #AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
       # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #run: terraform destroy -auto-approve -input=false
